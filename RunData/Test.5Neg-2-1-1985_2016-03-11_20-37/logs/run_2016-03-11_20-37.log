Treating group of Categories: Co
Selected columns:
Core.AgeAtExam, Core.EDSS, Core.DiseaseDuration, Core.DiseaseCourse, Core.MSSS
Running predictor 'GLM' for group 'Co'.
Ran predictor 'GLM' for group 'Co' in 0.01 minutes.
Running predictor 'RF' for group 'Co'.
Ran predictor 'RF' for group 'Co' in 0.02 minutes.
Running predictor 'RF2' for group 'Co'.
Ran predictor 'RF2' for group 'Co' in 0.04 minutes.
Running predictor 'RF3' for group 'Co'.
Ran predictor 'RF3' for group 'Co' in 0.01 minutes.
Running predictor 'RFO' for group 'Co'.
RFO for groups Core                                (  5 features) -> best mtry:  2 [perf: 0.699]
ERROR running train/test for predictor 'RFO' and group 'Co': 
 Not enough distinct predictions to compute area under the ROC curve.
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: tune.randomForest(x = Xtrain, y = as.factor(Ytrain), mtry = mtrys, predict.func = predict.fun, tunecontrol = tune.control(cross = 5, error.fun = function(Yt, Yp) -AUROC(Yp, 
     Yt))) at Code/05_predictors.R:35
5: tune("randomForest", train.x = x, train.y = y, ranges = ranges, ...)
6: tunecontrol$error.fun(true.y, pred)
7: AUROC(Yp, Yt) at Code/05_predictors.R:39
8: calcAuroc(ROCR::prediction(preds, labels)) at Code/Helpers/Evaluator.R:73
9: ROCR::performance(pred, "auc") at Code/Helpers/Evaluator.R:69
10: do.call(function.name, argumentlist)
11: .performance.auc(fpr.stop = 1, predictions = structure(c(0.354, 0, 0, 0, 0, 0, 0, 0.002, 0.002, 0.086, 0.002, 0.246, 0, 0, 0, 0.002, 0.002, 0, 0, 0, 0, 0, 0.004, 
 0.002, 0, 0, 0, 0.008, 0.002, 0, 0.016), .Names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", 
 "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31")), labels = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("FALSE", "TRUE"), class = c("ordered", "factor")), cutoffs = structure(c(Inf, 0.354, 0.246, 0.086, 
 0.016, 0.008, 0.004, 0.002, 0), .Names = c("", "1", "12", "10", "31", "28", "23", "29", "30")), fp = c(0, 1, 2, 3, 4, 5, 6, 13, 31), tp = c(0, 0, 0, 0, 0, 0, 0, 
 0, 0), fn = c(0, 0, 0, 0, 0, 0, 0, 0, 0), tn = c(31, 30, 29, 28, 27, 26, 25, 18, 0), n.pos = 0L, n.neg = 31L, n.pos.pred = c(0, 1, 2, 3, 4, 5, 6, 13, 31), n.neg.pred = c(31, 
 30, 29, 28, 27, 26, 25, 18, 0))
12: stop(paste("Not enough distinct predictions to compute area", "under the ROC curve."))
Running predictor 'RP' for group 'Co'.
RPart for groups Core                                (  5 features) -> best min split: 110 / best cp: 0.001  [perf: 0.744]
ERROR running train/test for predictor 'RP' and group 'Co': 
 Number of classes is not equal to 2.
ROCR currently supports only evaluation of binary classification tasks.
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: tune.rpart(formula = Y ~ ., data = data.frame(Y = as.numeric(Ytrain), Xtrain), minsplit = (2:11) * 10, cp = c(1e-04, 3e-04, 0.001, 0.002, 0.005, 0.01, 0.02, 0.05), 
     tunecontrol = tune.control(cross = 5, error.fun = function(Yt, Yp) -AUROC(Yp, Yt))) at Code/05_predictors.R:123
5: tune("rpart.wrapper", train.x = formula, data = data, ranges = ranges, predict.func = predict.func, na.action = na.action, ...)
6: tunecontrol$error.fun(true.y, pred)
7: AUROC(Yp, Yt) at Code/05_predictors.R:128
8: calcAuroc(ROCR::prediction(preds, labels)) at Code/Helpers/Evaluator.R:73
9: ROCR::performance(pred, "auc") at Code/Helpers/Evaluator.R:69
10: ROCR::prediction(preds, labels)
11: stop(message)
Running predictor 'SVM' for group 'Co'.
SVM for groups Core                                (  5 features) -> best gamma:  0.000977 / best cost:   3.16 [perf: 0.749]
SVM for groups Core                                (  5 features) -> best gamma:       0.5 / best cost:   3.16 [perf: 0.943]
Ran predictor 'SVM' for group 'Co' in 1.96 minutes.
Running predictor 'NB' for group 'Co'.
NB for groups Core                                (  5 features) -> best l: 15 [perf: 0.739]
NB for groups Core                                (  5 features) -> best l: 14 [perf: 0.610]
Ran predictor 'NB' for group 'Co' in 0.23 minutes.
Running predictor 'KNN' for group 'Co'.
ERROR running train/test for predictor 'KNN' and group 'Co': 
 unused argument (ytest = c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, 















TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FA
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: sapply(lapply(kknn.mod$fitted.values, as.numeric), AUROC, ytest = Ytrain) at Code/05_predictors.R:153
5: lapply(X = X, FUN = FUN, ...)
6: FUN(X[[1L]], ...)
Running predictor 'KNNC' for group 'Co'.
KNNC for groups Core                                (  5 features) ->  best k: 9 / kernel: optimal
KNNC for groups Core                                (  5 features) ->  best k: 8 / kernel: optimal
Ran predictor 'KNNC' for group 'Co' in 0.01 minutes.
Treating group of Categories: CoMS
Selected columns:
Core.AgeAtExam, Core.EDSS, Core.DiseaseDuration, Core.DiseaseCourse, Core.MSSS, MSFC.T25FW, MSFC.NHPT
Running predictor 'GLM' for group 'CoMS'.
Ran predictor 'GLM' for group 'CoMS' in 0.02 minutes.
Running predictor 'RF' for group 'CoMS'.
Ran predictor 'RF' for group 'CoMS' in 0.04 minutes.
Running predictor 'RF2' for group 'CoMS'.
Ran predictor 'RF2' for group 'CoMS' in 0.04 minutes.
Running predictor 'RF3' for group 'CoMS'.
Ran predictor 'RF3' for group 'CoMS' in 0.01 minutes.
Running predictor 'RFO' for group 'CoMS'.
RFO for groups Core - MSFC                         (  7 features) -> best mtry:  2 [perf: 0.777]
ERROR running train/test for predictor 'RFO' and group 'CoMS': 
 Not enough distinct predictions to compute area under the ROC curve.
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: tune.randomForest(x = Xtrain, y = as.factor(Ytrain), mtry = mtrys, predict.func = predict.fun, tunecontrol = tune.control(cross = 5, error.fun = function(Yt, Yp) -AUROC(Yp, 
     Yt))) at Code/05_predictors.R:35
5: tune("randomForest", train.x = x, train.y = y, ranges = ranges, ...)
6: tunecontrol$error.fun(true.y, pred)
7: AUROC(Yp, Yt) at Code/05_predictors.R:39
8: calcAuroc(ROCR::prediction(preds, labels)) at Code/Helpers/Evaluator.R:73
9: ROCR::performance(pred, "auc") at Code/Helpers/Evaluator.R:69
10: do.call(function.name, argumentlist)
11: .performance.auc(fpr.stop = 1, predictions = structure(c(0.018, 0.266, 0.018, 0.104, 0, 0.01, 0, 0.176, 0.008, 0.168, 0.004, 0, 0.006, 0, 0, 0.006, 0.042, 0.034, 
 0.064, 0, 0.006, 0.002, 0.352, 0, 0.142, 0, 0, 0.006, 0.192, 0.014, 0), .Names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", 
 "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31")), labels = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("FALSE", "TRUE"), class = c("ordered", "factor")), cutoffs = structure(c(Inf, 
 0.352, 0.266, 0.192, 0.176, 0.168, 0.142, 0.104, 0.064, 0.042, 0.034, 0.018, 0.014, 0.01, 0.008, 0.006, 0.004, 0.002, 0), .Names = c("", "23", "2", "29", "8", 
 "10", "25", "4", "19", "17", "18", "3", "30", "6", "9", "28", "11", "22", "31")), fp = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 19, 20, 21, 31), tp = c(0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), fn = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), tn = c(31, 30, 29, 28, 27, 26, 25, 24, 
 23, 22, 21, 19, 18, 17, 16, 12, 11, 10, 0), n.pos = 0L, n.neg = 31L, n.pos.pred = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 19, 20, 21, 31), n.neg.pred = c(31, 
 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 12, 11, 10, 0))
12: stop(paste("Not enough distinct predictions to compute area", "under the ROC curve."))
Running predictor 'RP' for group 'CoMS'.
RPart for groups Core - MSFC                         (  7 features) -> best min split: 110 / best cp: 0.0001 [perf: 0.772]
RPart for groups Core - MSFC                         (  7 features) -> best min split: 20 / best cp: 0.0001 [perf: 0.739]
Ran predictor 'RP' for group 'CoMS' in 0.47 minutes.
Running predictor 'SVM' for group 'CoMS'.
SVM for groups Core - MSFC                         (  7 features) -> best gamma:   0.00781 / best cost:   3.16 [perf: 0.802]
SVM for groups Core - MSFC                         (  7 features) -> best gamma:         1 / best cost:    0.1 [perf: 0.929]
Ran predictor 'SVM' for group 'CoMS' in 1.91 minutes.
Running predictor 'NB' for group 'CoMS'.
NB for groups Core - MSFC                         (  7 features) -> best l: 15 [perf: 0.729]
NB for groups Core - MSFC                         (  7 features) -> best l: 10 [perf: 0.215]
Ran predictor 'NB' for group 'CoMS' in 0.27 minutes.
Running predictor 'KNN' for group 'CoMS'.
ERROR running train/test for predictor 'KNN' and group 'CoMS': 
 unused argument (ytest = c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, 





FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, 









TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FA
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: sapply(lapply(kknn.mod$fitted.values, as.numeric), AUROC, ytest = Ytrain) at Code/05_predictors.R:153
5: lapply(X = X, FUN = FUN, ...)
6: FUN(X[[1L]], ...)
Running predictor 'KNNC' for group 'CoMS'.
KNNC for groups Core - MSFC                         (  7 features) ->  best k: 11 / kernel: optimal
KNNC for groups Core - MSFC                         (  7 features) ->  best k: 1 / kernel: optimal
Ran predictor 'KNNC' for group 'CoMS' in 0.01 minutes.
Treating group of Categories: CoPa
Selected columns:
Core.AgeAtExam, Core.EDSS, Core.DiseaseDuration, Core.DiseaseCourse, Core.MSSS, Patient.AgeOfOnset, Patient.Gender
Running predictor 'GLM' for group 'CoPa'.
Ran predictor 'GLM' for group 'CoPa' in 0.02 minutes.
Running predictor 'RF' for group 'CoPa'.
Ran predictor 'RF' for group 'CoPa' in 0.04 minutes.
Running predictor 'RF2' for group 'CoPa'.
Ran predictor 'RF2' for group 'CoPa' in 0.04 minutes.
Running predictor 'RF3' for group 'CoPa'.
Ran predictor 'RF3' for group 'CoPa' in 0.01 minutes.
Running predictor 'RFO' for group 'CoPa'.
RFO for groups Core - Patient                      (  7 features) -> best mtry:  2 [perf: 0.718]
RFO for groups Core - Patient                      (  7 features) -> best mtry:  3 [perf: 0.852]
Ran predictor 'RFO' for group 'CoPa' in 0.18 minutes.
Running predictor 'RP' for group 'CoPa'.
RPart for groups Core - Patient                      (  7 features) -> best min split: 110 / best cp: 0.0001 [perf: 0.745]
RPart for groups Core - Patient                      (  7 features) -> best min split: 20 / best cp: 0.0001 [perf: 0.814]
Ran predictor 'RP' for group 'CoPa' in 0.45 minutes.
Running predictor 'SVM' for group 'CoPa'.
SVM for groups Core - Patient                      (  7 features) -> best gamma:   0.00391 / best cost:    0.1 [perf: 0.755]
ERROR running train/test for predictor 'SVM' and group 'CoPa': 
 Not enough distinct predictions to compute area under the ROC curve.
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: tune(svm, train.x = data.matrix(Xtrain), train.y = as.factor(Ytrain), ranges = list(gamma = 2^seq(-10, 0), cost = 10^(seq(-1, 1.5, 0.5)), probability = TRUE), 
     predict.func = predict.fun, tunecontrol = tune.control(cross = 5, error.fun = function(Yt, Yp) -AUROC(Yp, Yt))) at Code/05_predictors.R:69
5: tunecontrol$error.fun(true.y, pred)
6: AUROC(Yp, Yt) at Code/05_predictors.R:76
7: calcAuroc(ROCR::prediction(preds, labels)) at Code/Helpers/Evaluator.R:73
8: ROCR::performance(pred, "auc") at Code/Helpers/Evaluator.R:69
9: do.call(function.name, argumentlist)
10: .performance.auc(fpr.stop = 1, predictions = structure(c(0.0649046711458502, 0.0610079440653127, 0.0458629377593261, 0.0502287712176613, 0.0698821533902197, 0.05283357983578, 
 0.0553227840385094, 0.054207398945026, 0.0536019070879389, 0.0503359736332383, 0.0767200663707375, 0.0814164974213375, 0.0663368406822365, 0.0611804237943093, 
 0.0722115295646257, 0.0520241822600305, 0.0470010819940381, 0.0600802189142704, 0.0394750937742208, 0.0692053980449557, 0.0552598671609781, 0.0736580273203892, 
 0.0528836355238089, 0.0699423742618824, 0.0387157719169315, 0.0777282726537224, 0.0725725842606065, 0.061251946950054, 0.0558467414722897, 0.057424911494929, 0.0526403338634024
 ), .Names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", 
 "27", "28", "29", "30", "31")), labels = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
 1L, 1L, 1L, 1L), .Label = c("FALSE", "TRUE"), class = c("ordered", "factor")), cutoffs = structure(c(Inf, 0.0814164974213375, 0.0777282726537224, 0.0767200663707375, 
 0.0736580273203892, 0.0725725842606065, 0.0722115295646257, 0.0699423742618824, 0.0698821533902197, 0.0692053980449557, 0.0663368406822365, 0.0649046711458502, 
 0.061251946950054, 0.0611804237943093, 0.0610079440653127, 0.0600802189142704, 0.057424911494929, 0.0558467414722897, 0.0553227840385094, 0.0552598671609781, 0.054207398945026, 
 0.0536019070879389, 0.0528836355238089, 0.05283357983578, 0.0526403338634024, 0.0520241822600305, 0.0503359736332383, 0.0502287712176613, 0.0470010819940381, 0.0458629377593261, 
 0.0394750937742208, 0.0387157719169315), .Names = c("", "12", "26", "11", "22", "27", "15", "24", "5", "20", "13", "1", "28", "14", "2", "18", "30", "29", "7", 
 "21", "8", "9", "23", "6", "31", "16", "10", "4", "17", "3", "19", "25")), fp = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 
 22, 23, 24, 25, 26, 27, 28, 29, 30, 31), tp = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), fn = c(0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), tn = c(31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 
 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0), n.pos = 0L, n.neg = 31L, n.pos.pred = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31), n.neg.pred = c(31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 
 8, 7, 6, 5, 4, 3, 2, 1, 0))
11: stop(paste("Not enough distinct predictions to compute area", "under the ROC curve."))
Running predictor 'NB' for group 'CoPa'.
NB for groups Core - Patient                      (  7 features) -> best l: 15 [perf: 0.741]
NB for groups Core - Patient                      (  7 features) -> best l:  0 [perf: 0.402]
Ran predictor 'NB' for group 'CoPa' in 0.25 minutes.
Running predictor 'KNN' for group 'CoPa'.
ERROR running train/test for predictor 'KNN' and group 'CoPa': 
 unused argument (ytest = c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, 


FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 












TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FA
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: sapply(lapply(kknn.mod$fitted.values, as.numeric), AUROC, ytest = Ytrain) at Code/05_predictors.R:153
5: lapply(X = X, FUN = FUN, ...)
6: FUN(X[[1L]], ...)
Running predictor 'KNNC' for group 'CoPa'.
KNNC for groups Core - Patient                      (  7 features) ->  best k: 11 / kernel: optimal
KNNC for groups Core - Patient                      (  7 features) ->  best k: 8 / kernel: optimal
Ran predictor 'KNNC' for group 'CoPa' in 0.01 minutes.
Treating group of Categories: CoMSPa
Selected columns:
Core.AgeAtExam, Core.EDSS, Core.DiseaseDuration, Core.DiseaseCourse, Core.MSSS, MSFC.T25FW, MSFC.NHPT, Patient.AgeOfOnset, Patient.Gender
Running predictor 'GLM' for group 'CoMSPa'.
Ran predictor 'GLM' for group 'CoMSPa' in 0.02 minutes.
Running predictor 'RF' for group 'CoMSPa'.
Ran predictor 'RF' for group 'CoMSPa' in 0.05 minutes.
Running predictor 'RF2' for group 'CoMSPa'.
Ran predictor 'RF2' for group 'CoMSPa' in 0.06 minutes.
Running predictor 'RF3' for group 'CoMSPa'.
Ran predictor 'RF3' for group 'CoMSPa' in 0.02 minutes.
Running predictor 'RFO' for group 'CoMSPa'.
RFO for groups Core - MSFC - Patient               (  9 features) -> best mtry:  3 [perf: 0.777]
ERROR running train/test for predictor 'RFO' and group 'CoMSPa': 
 Not enough distinct predictions to compute area under the ROC curve.
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: tune.randomForest(x = Xtrain, y = as.factor(Ytrain), mtry = mtrys, predict.func = predict.fun, tunecontrol = tune.control(cross = 5, error.fun = function(Yt, Yp) -AUROC(Yp, 
     Yt))) at Code/05_predictors.R:35
5: tune("randomForest", train.x = x, train.y = y, ranges = ranges, ...)
6: tunecontrol$error.fun(true.y, pred)
7: AUROC(Yp, Yt) at Code/05_predictors.R:39
8: calcAuroc(ROCR::prediction(preds, labels)) at Code/Helpers/Evaluator.R:73
9: ROCR::performance(pred, "auc") at Code/Helpers/Evaluator.R:69
10: do.call(function.name, argumentlist)
11: .performance.auc(fpr.stop = 1, predictions = structure(c(0.262, 0.29, 0, 0.076, 0.014, 0.118, 0.002, 0.01, 0.168, 0.004, 0, 0.14, 0, 0.002, 0.036, 0.006, 0.378, 
 0, 0, 0.006, 0.022, 0.002, 0.006, 0.002, 0.216, 0.014, 0, 0.002, 0.028, 0.02, 0.002), .Names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", 
 "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31")), labels = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 
 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("FALSE", "TRUE"), class = c("ordered", "factor"
 )), cutoffs = structure(c(Inf, 0.378, 0.29, 0.262, 0.216, 0.168, 0.14, 0.118, 0.076, 0.036, 0.028, 0.022, 0.02, 0.014, 0.01, 0.006, 0.004, 0.002, 0), .Names = c("", 
 "17", "2", "1", "25", "9", "12", "6", "4", "15", "29", "21", "30", "26", "8", "23", "10", "31", "27")), fp = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 
 18, 19, 25, 31), tp = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), fn = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), tn = c(31, 30, 
 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 16, 13, 12, 6, 0), n.pos = 0L, n.neg = 31L, n.pos.pred = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 
 19, 25, 31), n.neg.pred = c(31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 16, 13, 12, 6, 0))
12: stop(paste("Not enough distinct predictions to compute area", "under the ROC curve."))
Running predictor 'RP' for group 'CoMSPa'.
RPart for groups Core - MSFC - Patient               (  9 features) -> best min split: 70 / best cp: 0.002  [perf: 0.761]
RPart for groups Core - MSFC - Patient               (  9 features) -> best min split: 20 / best cp: 0.0001 [perf: 0.865]
Ran predictor 'RP' for group 'CoMSPa' in 0.55 minutes.
Running predictor 'SVM' for group 'CoMSPa'.
SVM for groups Core - MSFC - Patient               (  9 features) -> best gamma:   0.00781 / best cost:     10 [perf: 0.801]
ERROR running train/test for predictor 'SVM' and group 'CoMSPa': 
 Not enough distinct predictions to compute area under the ROC curve.
TRACEBACK:
1: withCallingHandlers({
     if (file.exists(fn <- file.path(RD, paste0(predName, "_", catGroupLabel, ".tsv")))) {
         cats("Already run predictor '%s' on group '%s', skipping...\n", predName, catGroupLabel, file = logFilePath)
     }
     else {
         cats("Running predictor '%s' for group '%s'.\n", predName, catGroupLabel, file = logFilePath)
         Yps <- run(X, Y, pred, FIs)
         write.matrix(Yps, fn)
         cats("Ran predictor '%s' for group '%s' in %.2f minutes.\n", predName, catGroupLabel, difftime(Sys.time(), t0, units = "min"), file = logFilePath)
     }
 }, error = function(e) {
     sc <- sys.calls()
     cats("ERROR running train/test for predictor '%s' and group '%s': \n %s\nTRACEBACK:\n%s\n", predName, catGroupLabel, e$message, paste(create_traceback(sc[25:(length(sc) - 
         2)]), collapse = "\n"), file = logFilePath)
 })
2: run(X, Y, pred, FIs) at Code/Helpers.R:46
3: predictor$trainPredict(X[foldIdx != i, ], Y[foldIdx != i], X[foldIdx == i, ], logFilePath = logFilePath) at Code/Helpers/CVer.R:137
4: tune(svm, train.x = data.matrix(Xtrain), train.y = as.factor(Ytrain), ranges = list(gamma = 2^seq(-10, 0), cost = 10^(seq(-1, 1.5, 0.5)), probability = TRUE), 
     predict.func = predict.fun, tunecontrol = tune.control(cross = 5, error.fun = function(Yt, Yp) -AUROC(Yp, Yt))) at Code/05_predictors.R:69
5: tunecontrol$error.fun(true.y, pred)
6: AUROC(Yp, Yt) at Code/05_predictors.R:76
7: calcAuroc(ROCR::prediction(preds, labels)) at Code/Helpers/Evaluator.R:73
8: ROCR::performance(pred, "auc") at Code/Helpers/Evaluator.R:69
9: do.call(function.name, argumentlist)
10: .performance.auc(fpr.stop = 1, predictions = structure(c(0.0668898273498185, 0.052040101949313, 0.0693675847210922, 0.0519140118524088, 0.0556318190674625, 0.0522684071119229, 
 0.0537883705090589, 0.0498798503020353, 0.0538346310778324, 0.0535463096897681, 0.0557074271558947, 0.0571879147315607, 0.0558133728540698, 0.0623524477313765, 
 0.0652409821850262, 0.0529571592068306, 0.0579241294751172, 0.0489884237828705, 0.0596792006884725, 0.0653728039637052, 0.0537144377857984, 0.0562770276172444, 
 0.0558719077029246, 0.056627157844836, 0.0602963008548111, 0.0516652476588973, 0.0526583155418473, 0.0598240676505687, 0.0556674135548127, 0.0678139703828668, 
 0.0608047519519263), .Names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", 
 "24", "25", "26", "27", "28", "29", "30", "31")), labels = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("FALSE", "TRUE"), class = c("ordered", "factor")), cutoffs = structure(c(Inf, 0.0693675847210922, 0.0678139703828668, 
 0.0668898273498185, 0.0653728039637052, 0.0652409821850262, 0.0623524477313765, 0.0608047519519263, 0.0602963008548111, 0.0598240676505687, 0.0596792006884725, 
 0.0579241294751172, 0.0571879147315607, 0.056627157844836, 0.0562770276172444, 0.0558719077029246, 0.0558133728540698, 0.0557074271558947, 0.0556674135548127, 
 0.0556318190674625, 0.0538346310778324, 0.0537883705090589, 0.0537144377857984, 0.0535463096897681, 0.0529571592068306, 0.0526583155418473, 0.0522684071119229, 
 0.052040101949313, 0.0519140118524088, 0.0516652476588973, 0.0498798503020353, 0.0489884237828705), .Names = c("", "3", "30", "1", "20", "15", "14", "31", "25", 
 "28", "19", "17", "12", "24", "22", "23", "13", "11", "29", "5", "9", "7", "21", "10", "16", "27", "6", "2", "4", "26", "8", "18")), fp = c(0, 1, 2, 3, 4, 5, 
 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31), tp = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), fn = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), tn = c(31, 
 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0), n.pos = 0L, n.neg = 31L, n.pos.pred = c(0, 
 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31), n.neg.pred = c(31, 30, 29, 28, 27, 26, 25, 
 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0))
11: stop(paste("Not enough distinct predictions to compute area", "under the ROC curve."))
Running predictor 'NB' for group 'CoMSPa'.
Time elapsed for the run:
10.2833 secs
